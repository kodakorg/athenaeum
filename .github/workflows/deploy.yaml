name: deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, runner-node]
    steps:
      - name: Setenv
        run: |
          echo "URL=athenaeum.no" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Update and Deploy
        run: |
          TARGET_DIR="/home/zom/${{ env.URL }}"
          BACKUP_DIR="/home/zom/backups/${{ env.URL }}-$(date +%Y%m%d-%H%M%S)"
          REPO_URL="git@github.com:${{ github.repository }}.git"

          # Create backup of current deployment
          if [ -d "$TARGET_DIR" ]; then
            echo "Creating backup of current deployment..."
            mkdir -p "$(dirname "$BACKUP_DIR")"
            cp -r "$TARGET_DIR" "$BACKUP_DIR"
            echo "Backup created at: $BACKUP_DIR"
          fi

          # Fresh install or update
          if [ ! -d "$TARGET_DIR" ]; then
            echo "Directory does not exist, creating and cloning repository..."
            mkdir -p "$TARGET_DIR"
            git clone "$REPO_URL" "$TARGET_DIR" || { echo "Git clone failed"; exit 1; }
            pushd "$TARGET_DIR"
          else
            echo "Directory exists, pulling latest changes..."
            pushd "$TARGET_DIR"
            git pull || { echo "Git pull failed"; exit 1; }
          fi

          # Clean install with fallback strategies
          echo "Attempting clean npm install..."
          
          # Strategy 1: Try npm ci first (fastest for production)
          if npm ci 2>/dev/null; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, trying alternative strategies..."
            
            # Strategy 2: Remove node_modules and package-lock, then install
            echo "Removing node_modules and package-lock.json..."
            rm -rf node_modules package-lock.json
            
            if npm install; then
              echo "npm install succeeded after cleanup"
            else
              echo "npm install failed, restoring from backup..."
              popd
              
              # Restore from backup
              if [ -d "$BACKUP_DIR" ]; then
                rm -rf "$TARGET_DIR"
                mv "$BACKUP_DIR" "$TARGET_DIR"
                echo "Restored from backup"
                exit 1
              else
                echo "No backup available, deployment failed"
                exit 1
              fi
            fi
          fi

          popd

          echo "Testing application..."
          pushd "$TARGET_DIR"
          
          # Run a quick syntax check or test if available
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test || echo "Tests failed but continuing..."
          fi
          
          # Check if main file exists and is valid
          MAIN_FILE=$(node -e "console.log(require('./package.json').main || 'server.js')" 2>/dev/null || echo "server.js")
          if [ -f "$MAIN_FILE" ]; then
            node -c "$MAIN_FILE" || { echo "Syntax error in main file"; exit 1; }
          fi
          
          popd

          echo "Restarting service..."
          sudo systemctl restart ${{ env.URL }} || { 
            echo "Service restart failed, attempting to restore backup..."
            
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf "$TARGET_DIR"
              mv "$BACKUP_DIR" "$TARGET_DIR"
              sudo systemctl restart ${{ env.URL }}
              echo "Service restored from backup"
            fi
            
            exit 1
          }

        working-directory: ${{ github.workspace }}

      - name: Verify Deployment
        run: |
          echo "Waiting for service to start..."
          sleep 10
          if sudo systemctl is-active ${{ env.URL }} --quiet; then
            echo "Service is running"
            curl -f http://localhost:8888/health || { echo "Health check failed"; exit 1; }
          else
            echo "Service failed to start"
            sudo systemctl status ${{ env.URL }}
            exit 1
          fi

      - name: Cleanup Old Backups
        run: |
          # Keep only the last backup
          BACKUP_BASE="/home/zom/backups"
          if [ -d "$BACKUP_BASE" ]; then
            find "$BACKUP_BASE" -name "${{ env.URL }}-*" -type d | sort -r | tail -n +2 | xargs rm -rf
            echo "Cleaned up old backups"
          fi
        continue-on-error: true